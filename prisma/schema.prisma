// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  notes         Note[]
  leetcodeProblems LeetcodeProblem[]
  chatgptChats  ChatgptChat[]
  tags          Tag[]
  notesFolders  NotesFolder[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Task Management
model Task {
  id          String    @id @default(cuid())
  title       String
  description String?   @db.Text
  completed   Boolean   @default(false)
  priority    Priority  @default(MEDIUM)
  dueDate     DateTime?
  progress    Int       @default(0) // 0-100
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tags        Tag[]     @relation("TaskTags")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#3B82F6")
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tasks     Task[]   @relation("TaskTags")
  notes     Note[]   @relation("NoteTags")
  
  @@unique([name, userId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Notes Management
model NotesFolder {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#10B981")
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  notes     Note[]
  
  @@unique([name, userId])
}

model Note {
  id        String      @id @default(cuid())
  title     String
  content   String      @db.Text
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  folderId  String?
  folder    NotesFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  
  tags      Tag[]       @relation("NoteTags")
}

// LeetCode Management
model LeetcodeProblem {
  id          String     @id @default(cuid())
  title       String
  link        String
  difficulty  Difficulty
  notes       String?    @db.Text
  tags        String[]   // Array of custom tags
  isFavorite  Boolean    @default(true)
  lastVisited DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// ChatGPT Management
model ChatgptChat {
  id          String   @id @default(cuid())
  title       String
  link        String
  description String?  @db.Text
  isPinned    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
